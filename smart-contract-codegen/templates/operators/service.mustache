'use strict';
var request = require('request')
var config = require('config');

{{#operations}}
{{#operation}}

/**
 {{#summary}}
 * {{{summary}}}
 {{/summary}}
 {{#notes}}
 * {{{notes}}}
 {{/notes}}
 *
{{#allParams}}
 * {{paramName}} {{{dataType}}} {{{description}}}{{^required}} (optional){{/required}}
{{/allParams}}
{{^returnType}}
 * no response value expected for this operation
{{/returnType}}
{{#returnType}}
 * returns {{{returnType}}}
{{/returnType}}
 **/
exports.{{{operationId}}} = (req, res) => {
  {{#pathParams}}
  var {{paramName}} = req.swagger.params['{{baseName}}'].value;
  {{/pathParams}}
  {{#queryParams}}
  var {{paramName}} = req.query['{{baseName}}'];
  {{/queryParams}}
  var restServerConfig = req.app.get('config').restServer;
  var composerBaseURL = restServerConfig.httpURL;
  var serviceEndpoint = composerBaseURL + '/{{classname}}';

  var filter = {};
  var notBefore = req.query.notBefore;
  if(notBefore) {
    var date = new Date();
    date.setTime(notBefore);
    filter = {
      "where": {
        "timestamp": {
          "gt": date.toISOString()
        }
      }
    }
  }
  return new Promise((resolve, reject) => {
    request.{{httpMethod}}({
      url: `${serviceEndpoint}?filter=${JSON.stringify(filter)}`,
      json: true
    }, (err, response, data) => {
      if (err) {
        reject(err.message);
        return;
      } else {
        resolve(data);
      }
    })
  })
}

{{/operation}}
{{/operations}}
